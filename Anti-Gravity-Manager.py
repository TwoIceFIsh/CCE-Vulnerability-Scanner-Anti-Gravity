import ctypes
import os
import shutil
import sys
import time
from datetime import datetime

import requests

from antigravity.tools import response_to_json, extract
from options import *

STARTUP_PATH = f'{os.path.expanduser("~")}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup'
INSTALL_PATH = os.path.expanduser('~') + '\\.Anti-Gravity'
FLAG = 'DK'
if os.path.isfile(f'{STARTUP_PATH}\\Anti-Gravity-Manager.exe'):
    FLAG = 'OK'

if getattr(sys, 'frozen', False):
    application_path = os.path.dirname(sys.executable)
elif __file__:
    application_path = os.path.dirname(__file__)

while True:
    res = requests.get(API_SERVER_URL, auth=(OWNER, KEY))

    if res.status_code != 200:
        print(datetime.now().strftime("%Y .%m.%d %H:%M:%S"), "업데이트 체크 실패")

    try:
        os.mkdir(INSTALL_PATH)
        with open(f'{INSTALL_PATH}/versions.ele', 'r') as f:
            old_version = f.read()
    except (FileExistsError, FileNotFoundError):
        with open(f'{INSTALL_PATH}/versions.ele', 'w') as f:
            old_version = f.write('')

    res_json = response_to_json(res)
    new_version = str(res_json['assets'][0]['id'])
    print(res_json)
    if old_version != new_version:
        print("====================")
        print("업데이트 가능 버전을 발견했습니다.")
        print(f'''{res_json["name"]} / {res_json["tag_name"]}''')  # 해당 릴리즈의 제목과 태그명을 확인할 수 있음
        print(f'''{res_json["body"]}''')  # 해당 릴리즈의 내용을 확인할 수 있음

        # 최신파일 다운로드
        download_url = res_json["assets"][0]["url"]
        contents = requests.get(download_url, auth=(OWNER, KEY), headers={'Accept': 'application/octet-stream'},
                                stream=True)  # 헤더와 stream을 지정하여 파일을 다운받을 수 있도록 했다.

        # 업데이트할 파일이 겹치지 않도록 update 폴더 생성
        os.makedirs(os.path.join(INSTALL_PATH, "update"), exist_ok=True)

        # 다운받은 데이터를 태그명으로 저장
        with open(os.path.join(INSTALL_PATH, 'update', f'''{res_json["tag_name"]}.zip'''), "wb") as f:
            for chunk in contents.iter_content(chunk_size=1024 * 1024):
                f.write(chunk)

        # 압축해제하는 함수  
        extract(INSTALL_PATH, os.path.join(INSTALL_PATH, 'update', f'''{res_json["tag_name"]}.zip'''))

        # update/tmp에 압축해제된 데이터를 루트에 복사하며, update-check.exe는 복사하지 않음
        shutil.copytree(os.path.join(INSTALL_PATH, "update", "tmp"), INSTALL_PATH,
                        ignore=shutil.ignore_patterns("Anti-Gravity-a.exe"),
                        dirs_exist_ok=True)
        shutil.copytree(os.path.join(INSTALL_PATH, "update", "tmp"), STARTUP_PATH,
                        ignore=shutil.ignore_patterns("Anti-Gravity-a.exe"),
                        dirs_exist_ok=True)

        # 새로운 버전을 입력해 줌
        with open(f'{INSTALL_PATH}/versions.ele', 'w') as f:
            f.write(str(new_version))

        # 업데이트 임시 폴더 삭제
        shutil.rmtree(os.path.join(INSTALL_PATH, "update"))

        print(datetime.now().strftime("%Y.%m.%d %H:%M:%S"), "업데이트 완료")
        # os.startfile(os.path.join(STARTUP_PATH, "Anti-Gravity-Manager.exe"))

    else:
        print('최신버전 미탐지')

    if FLAG == 'DK':
        msg = ctypes.windll.user32.MessageBoxW(None, "설치가 완료 되었습니다. 재부팅이 필요합니다.", "Anti-Gravity", 0)
        break

    time.sleep(900)
