import os
import sys
import time
from datetime import datetime

import requests

from antigravity.tools import response_to_json, extract
from options import *

application_path = ''
if getattr(sys, 'frozen', False):
    application_path = os.path.dirname(sys.executable)
elif __file__:
    application_path = os.path.dirname(__file__)

while True:
    res = requests.get(API_SERVER_URL)

    if res.status_code != 200:
        print(datetime.now().strftime("%Y.%m.%d %H:%M:%S"), "업데이트 체크 실패")

    try:
        with open('./versions.ele', 'r') as f:
            old_version = f.read()
    except:
        with open('./versions.ele', 'w') as f:
            old_version = f.write('')

    res_json = response_to_json(res)
    new_version = str(res_json['assets'][0]['id'])

    if old_version != new_version:
        print('최신버전 탐지')

        download_url = res_json["assets"][0]["url"]
        contents = requests.get(download_url, headers={'Accept': 'application/octet-stream'},
                                stream=True)  # 헤더와 stream을 지정하여 파일을 다운받을 수 있도록 했다.

        os.makedirs(os.path.join(application_path, "update"), exist_ok=True)  # 업데이트할 파일이 겹치지 않도록 update 폴더 생성

        # 다운받은 데이터를 태그명으로 저장
        with open(os.path.join(application_path, 'update', f'''{res_json["tag_name"]}.zip'''), "wb") as f:
            for chunk in contents.iter_content(chunk_size=1024 * 1024):
                f.write(chunk)

        # 압축해제하는 함수
        extract(application_path, os.path.join(application_path, 'update', f'''{res_json["tag_name"]}.zip'''))

        # update/tmp에 압축해제된 데이터를 루트에 복사하며, update-check.exe는 복사하지 않음
        # shutil.copytree(os.path.join(application_path, "update", 'tmp'), application_path,
        #                 ignore=shutil.ignore_patterns("update-check.exe", ),
        #                 dirs_exist_ok=True)

        # 새로운 버전을 입력해 줌
        with open('./versions.ele', 'w') as f:
            f.write(str(new_version))

        # 업데이트 임시 폴더 삭제
        # shutil.rmtree(os.path.join(application_path, "update"))

        print(datetime.now().strftime("%Y.%m.%d %H:%M:%S"), "업데이트 완료")

        # 업데이트 완료 후 메인 프로그램을 다시 실행시켜줌
        # os.startfile(os.path.join(application_path, "MAIN.exe"))
    else:
        print('최신버전 미탐지')
    time.sleep(900)
